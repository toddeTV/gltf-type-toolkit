import type { Buffer } from 'node:buffer'
import type { UnpluginOptions } from 'unplugin'
import type { Options } from '../types.js'
import { readFile } from 'node:fs/promises'
import { dirname, parse, resolve } from 'node:path'
import { xxh3 } from '@node-rs/xxhash'
import { SEPARATE_GLTF_MODEL_EXTENSION } from '../core/constants.js'
import { handleReferencedModelFiles } from '../core/utils/find-models.js'
import { isBuild } from './dev.js'

export function loadInclude(id: string): boolean {
  // This is needed for some bundlers even though stated otherwise by the documentation...

  return id.endsWith(SEPARATE_GLTF_MODEL_EXTENSION)
}

export const createLoad: (options: Options | undefined) => UnpluginOptions['load'] = () => async function (id) {
  if (!id.endsWith(SEPARATE_GLTF_MODEL_EXTENSION)) {
    return
  }

  const rawGltf = JSON.parse(await readFile(id, { encoding: 'utf8' }))

  // For dev we just want to pass the gltf json. The gltf loader of three.js should do its thing correctly and resolve
  // all referenced files.
  // During building we want to bundle those referenced files. That means the paths inside the json need to be adjusted.
  if (isBuild()) {
    await handleReferencedModelFiles(rawGltf, async ({ setUri, uri }) => {
      // According to the gtlf spec uri should now always be relative to the gltf file. The other allowed type
      // (embedded) is not even forwarded here from this helper function.

      const absoluteUri = resolve(dirname(id), uri)

      const source = await readFile(absoluteUri)

      // Unplugin has no way to get the generated filename of an emitted file after it is generated by the bundler.
      // Because of that we hash the file ourselves and assign a fixed filename.

      const fileName = getHashedFilename(absoluteUri, source)

      this.emitFile({
        fileName,
        source,
        type: 'asset',
      })

      // The file name must be absolute because we want to serve it from the root.
      // TODO: Do we have to handle a base path here? Can we even get it in bundler-agnostic way?
      setUri(`/${fileName}`)
    })
  }

  return {
    code: `export default ${JSON.stringify(rawGltf)};`,
  }
}

function getHashedFilename(file: string, source: Buffer): string {
  const hash = xxh3.xxh128(source).toString(16)

  const { ext, name } = parse(file)

  // TODO: Make this folder configurable?
  return `models/${name}.${hash.slice(0, 8)}${ext}`
}
