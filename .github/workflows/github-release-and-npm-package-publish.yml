name: Release Creation on GitHub & NPM Publishing

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  check_conditions:
    name: Check conditions to create & release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      is_suffix_present: ${{ steps.check_create_release_suffix.outputs.is_suffix_present }}
      is_version_bump: ${{ steps.check_create_release_suffix.outputs.is_version_bump }}
      force_version: ${{ steps.check_create_release_suffix.outputs.force_version }}
    steps:
      - name: Checkout the Codebase
        uses: actions/checkout@v4
        with:
          ref: main # branch to checkout
          fetch-depth: 0

      - name: Check commit message suffix for `[create-release-TYPE]`
        id: check_create_release_suffix
        uses: actions/github-script@v7
        with:
          script: |
            // Get last commit message
            // context.sha === context.payload.head_commit.id
            const lastCommitMessage = context.payload.head_commit.message;
            const lastCommitMessageFirstLine = lastCommitMessage.split('\n')[0];

            let is_suffix_present = "false";
            let is_version_bump = "false";
            let force_version = "";

            const allowedTypes = [
              "auto",
              "major",
              "minor",
              "patch",
              "premajor",
              "preminor",
              "prepatch",
              "prerelease",
            ];

            const regex = /\[create-release(?:-([a-z]+))?\]/;
            const match = lastCommitMessageFirstLine.match(regex);

            if (match) {
              is_suffix_present = "true";
              if(match[1]){
                if(!allowedTypes.includes(match[1])){
                  throw new Error(`Invalid release TYPE: ${match[1]}`);
                }
                is_version_bump = "true";
                if(match[1] !== "auto"){
                  force_version = `--${match[1]}`
                }
              }
            }

            console.dir(`Set output: is_suffix_present=${is_suffix_present}`);
            core.setOutput("is_suffix_present", is_suffix_present);

            console.dir(`Set output: is_version_bump=${is_version_bump}`);
            core.setOutput("is_version_bump", is_version_bump);

            console.dir(`Set output: force_version=${force_version}`);
            core.setOutput("force_version", force_version);

  dependence-lint:
    name: Depend on Lint
    uses: ./.github/workflows/lint.yml

  create_release:
    needs:
      - check_conditions
      - dependence-lint
    if: needs.check_conditions.outputs.is_suffix_present == 'true'
    name: Create GitHub Release & NPM Publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout the Codebase
        uses: actions/checkout@v4
        with:
          ref: main # branch to checkout
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Enable pnpm
        run: |
          corepack enable
          corepack prepare pnpm@v9.15.4 --activate

      - name: Init git config for the bot by setting name & email
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "no-reply@todde.tv"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # - name: Get old `package.json` version
      #   id: get_package_version_old
      #   run: echo version=$(node -p "require('./package.json').version") >> $GITHUB_OUTPUT

      - name: Bump `package.json` version depending on given TYPE from commit message
        if: needs.check_conditions.outputs.is_version_bump == 'true'
        # -from "v${{ steps.get_package_version_old.outputs.version }}"
        run: pnpm changelogen --bump ${{ needs.check_conditions.outputs.force_version }} --no-commit --no-tag
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Get new `package.json` version
        id: get_package_version_new
        run: echo version=$(node -p "require('./package.json').version") >> $GITHUB_OUTPUT

      - name: Generate changelog from conventional commits
        # -from "v${{ steps.get_package_version_old.outputs.version }}"
        run: pnpm changelogen --output CHANGELOG.md -r "${{ steps.get_package_version_new.outputs.version }}" --no-commit --no-tag
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Git add, commit & push changes made to `package.json` & `CHANGELOG.md` to `main`
        run: |
          git add .
          git commit -m "chore(release): v${{ steps.get_package_version_new.outputs.version }}"
          git push origin main

      - name: Create a tag
        run: |
          git tag -a "v${{ steps.get_package_version_new.outputs.version }}" -m "Release v${{ steps.get_package_version_new.outputs.version }}"
          git push origin --tags

      - name: Sync tags with GitHub releases & create the new release
        # run: pnpm changelogen gh release all
        run: pnpm changelogen gh release "v${{ steps.get_package_version_new.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Install dependencies
      #   run: pnpm install --frozen-lockfile

      - name: Build the project
        run: pnpm run build

      # - name: Publish package to NPM
      #   if: github.ref == 'refs/heads/main'
      #   run: pnpm publish --access public
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish package to NPM
        # if: github.ref == 'refs/heads/main'
        uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.NPM_TOKEN }}
          access: public
          # registry: "https://npm.pkg.github.com/"
          registry: https://registry.npmjs.org/
