diff --git a/loaders/DRACOLoader.js b/loaders/DRACOLoader.js
index 43ca01558bbf0fffbfcebe85c2eabd962537a94e..b3ea813413c2fde835bd9d630b12113c35dda72a 100644
--- a/loaders/DRACOLoader.js
+++ b/loaders/DRACOLoader.js
@@ -1,3 +1,4 @@
+import { createDecoderModule } from "draco3d";
 import { Loader, FileLoader, BufferGeometry, BufferAttribute } from "three";
 const _taskCache = /* @__PURE__ */ new WeakMap();
 class DRACOLoader extends Loader {
@@ -6,7 +7,7 @@ class DRACOLoader extends Loader {
     this.decoderPath = "";
     this.decoderConfig = {};
     this.decoderBinary = null;
-    this.decoderPending = null;
+    this.decoderPending = new DRACODecoder();
     this.workerLimit = 4;
     this.workerPool = [];
     this.workerNextTaskID = 1;
@@ -86,13 +87,13 @@ class DRACOLoader extends Loader {
     let worker;
     const taskID = this.workerNextTaskID++;
     const taskCost = buffer.byteLength;
-    const geometryPending = this._getWorker(taskID, taskCost).then((_worker) => {
-      worker = _worker;
-      return new Promise((resolve, reject) => {
-        worker._callbacks[taskID] = { resolve, reject };
-        worker.postMessage({ type: "decode", id: taskID, taskConfig, buffer }, [buffer]);
-      });
-    }).then((message) => this._createGeometry(message.geometry));
+    const geometryPending = this.decoderPending.onmessage({
+      data: {
+        type: 'decode',
+        buffer,
+        taskConfig,
+      },
+    }).then((geometry) => this._createGeometry(geometry));
     geometryPending.catch(() => true).then(() => {
       if (worker && taskID) {
         this._releaseTask(worker, taskID);
@@ -128,7 +129,6 @@ class DRACOLoader extends Loader {
     });
   }
   preload() {
-    this._initDecoder();
     return this;
   }
   _initDecoder() {
@@ -211,10 +211,12 @@ class DRACOLoader extends Loader {
     return this;
   }
 }
-function DRACOWorker() {
-  let decoderConfig;
-  let decoderPending;
-  onmessage = function(e) {
+class DRACODecoder {
+  decoderModulePending;
+  constructor() {
+    this.decoderModulePending = createDecoderModule();
+  }
+  onmessage(e) {
     const message = e.data;
     switch (message.type) {
       case "init":
@@ -229,20 +231,12 @@ function DRACOWorker() {
       case "decode":
         const buffer = message.buffer;
         const taskConfig = message.taskConfig;
-        decoderPending.then((module) => {
-          const draco = module.draco;
+        return this.decoderModulePending.then((draco) => {
           const decoder = new draco.Decoder();
           const decoderBuffer = new draco.DecoderBuffer();
           decoderBuffer.Init(new Int8Array(buffer), buffer.byteLength);
           try {
-            const geometry = decodeGeometry(draco, decoder, decoderBuffer, taskConfig);
-            const buffers = geometry.attributes.map((attr) => attr.array.buffer);
-            if (geometry.index)
-              buffers.push(geometry.index.array.buffer);
-            self.postMessage({ type: "decode", id: message.id, geometry }, buffers);
-          } catch (error) {
-            console.error(error);
-            self.postMessage({ type: "error", id: message.id, error: error.message });
+            return this.decodeGeometry(draco, decoder, decoderBuffer, taskConfig);
           } finally {
             draco.destroy(decoderBuffer);
             draco.destroy(decoder);
@@ -251,7 +245,7 @@ function DRACOWorker() {
         break;
     }
   };
-  function decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {
+  decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {
     const attributeIDs = taskConfig.attributeIDs;
     const attributeTypes = taskConfig.attributeTypes;
     let dracoGeometry;
@@ -271,7 +265,7 @@ function DRACOWorker() {
     }
     const geometry = { index: null, attributes: [] };
     for (const attributeName in attributeIDs) {
-      const attributeType = self[attributeTypes[attributeName]];
+      const attributeType = global[attributeTypes[attributeName]];
       let attribute;
       let attributeID;
       if (taskConfig.useUniqueIDs) {
@@ -283,15 +277,15 @@ function DRACOWorker() {
           continue;
         attribute = decoder.GetAttribute(dracoGeometry, attributeID);
       }
-      geometry.attributes.push(decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));
+      geometry.attributes.push(this.decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));
     }
     if (geometryType === draco.TRIANGULAR_MESH) {
-      geometry.index = decodeIndex(draco, decoder, dracoGeometry);
+      geometry.index = this.decodeIndex(draco, decoder, dracoGeometry);
     }
     draco.destroy(dracoGeometry);
     return geometry;
   }
-  function decodeIndex(draco, decoder, dracoGeometry) {
+  decodeIndex(draco, decoder, dracoGeometry) {
     const numFaces = dracoGeometry.num_faces();
     const numIndices = numFaces * 3;
     const byteLength = numIndices * 4;
@@ -301,12 +295,12 @@ function DRACOWorker() {
     draco._free(ptr);
     return { array: index, itemSize: 1 };
   }
-  function decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {
+  decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {
     const numComponents = attribute.num_components();
     const numPoints = dracoGeometry.num_points();
     const numValues = numPoints * numComponents;
     const byteLength = numValues * attributeType.BYTES_PER_ELEMENT;
-    const dataType = getDracoDataType(draco, attributeType);
+    const dataType = this.getDracoDataType(draco, attributeType);
     const ptr = draco._malloc(byteLength);
     decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, dataType, byteLength, ptr);
     const array = new attributeType(draco.HEAPF32.buffer, ptr, numValues).slice();
@@ -317,7 +311,7 @@ function DRACOWorker() {
       itemSize: numComponents
     };
   }
-  function getDracoDataType(draco, attributeType) {
+  getDracoDataType(draco, attributeType) {
     switch (attributeType) {
       case Float32Array:
         return draco.DT_FLOAT32;
diff --git a/loaders/GLTFLoader.js b/loaders/GLTFLoader.js
index 851226bb4c491b990459cae65009113035f200cc..f1dd2991c9d88adf6ae1b6bfff5f85350d6b891e 100644
--- a/loaders/GLTFLoader.js
+++ b/loaders/GLTFLoader.js
@@ -1,3 +1,5 @@
+import { readFile } from "node:fs/promises";
+import { join } from "node:path";
 import { Loader, LoaderUtils, FileLoader, Color, SpotLight, PointLight, DirectionalLight, MeshBasicMaterial, MeshPhysicalMaterial, Vector2, Matrix4, Vector3, Quaternion, InstancedMesh, InstancedBufferAttribute, Object3D, TextureLoader, ImageBitmapLoader, BufferAttribute, InterleavedBuffer, InterleavedBufferAttribute, LinearFilter, LinearMipmapLinearFilter, RepeatWrapping, PointsMaterial, Material, LineBasicMaterial, MeshStandardMaterial, DoubleSide, PropertyBinding, BufferGeometry, SkinnedMesh, Mesh, TriangleStripDrawMode, TriangleFanDrawMode, LineSegments, Line, LineLoop, Points, Group, PerspectiveCamera, MathUtils, OrthographicCamera, Skeleton, AnimationClip, Bone, InterpolateLinear, NearestFilter, NearestMipmapNearestFilter, LinearMipmapNearestFilter, NearestMipmapLinearFilter, ClampToEdgeWrapping, MirroredRepeatWrapping, InterpolateDiscrete, FrontSide, Texture, VectorKeyframeTrack, NumberKeyframeTrack, QuaternionKeyframeTrack, Box3, Sphere, Interpolant } from "three";
 import { toTrianglesDrawMode } from "../utils/BufferGeometryUtils.js";
 import { version } from "../_polyfill/constants.js";
@@ -1630,6 +1632,7 @@ class GLTFParser {
     if (bufferDef.uri === void 0 && bufferIndex === 0) {
       return Promise.resolve(this.extensions[EXTENSIONS.KHR_BINARY_GLTF].body);
     }
+    return readFile(join(this.options.path, bufferDef.uri));
     const options = this.options;
     return new Promise(function(resolve, reject) {
       loader.load(LoaderUtils.resolveURL(bufferDef.uri, options.path), resolve, void 0, function() {
@@ -1792,6 +1795,7 @@ class GLTFParser {
     return promise;
   }
   loadImageSource(sourceIndex, loader) {
+    return Promise.resolve(null);
     const parser = this;
     const json = this.json;
     const options = this.options;
